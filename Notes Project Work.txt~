/*
 * UDP endpoint
 *
 * A simple UDP endpoint example using the WiShield 1.0
 *
 * NOTE: You must edit the uip-conf.h file in the WiShield library directory
 * as follows (at about line 110):
 *         #define UIP_CONF_UDP             1
 *
 * Change this back to 0 for compiling the other examples.
 *
 */

#include <WiShield.h>
#include "MultiAnalogRangeFinder.h"
#include "user_config.h"

//#define WIRELESS_MODE_INFRA	1
#define WIRELESS_MODE_ADHOC	2

// Wireless configuration parameters 
//-------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------

unsigned char local_ip[] = {192,168,1,4};	// IP address of WiShield
unsigned char gateway_ip[] = {192,168,1,1};	// router or gateway IP address
unsigned char subnet_mask[] = {255,255,255,0};	// subnet mask for the local network
const prog_char ssid[] PROGMEM = {DRONE_NAME};		// max 32 bytes

unsigned char security_type = 0;	// 0 - open; 1 - WEP; 2 - WPA; 3 - WPA2

// WPA/WPA2 passphrase
const prog_char security_passphrase[] PROGMEM = {"12345678"};	// max 64 characters

// WEP 128-bit keys
// sample HEX keys
prog_uchar wep_keys[] PROGMEM = {	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,	// Key 0
									0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00,	// Key 1
									0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00,	// Key 2
									0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00	// Key 3
								};


// setup the wireless mode
// infrastructure - connect to AP
// adhoc - connect to another WiFi device
unsigned char wireless_mode = WIRELESS_MODE_ADHOC;

unsigned char ssid_len;
unsigned char security_passphrase_len;
//-------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------

// Variables for drone states
//-------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------
char data[100];
char yj_mac[17];
int seq = 1;
unsigned long time;

// 0 = landingState, 1 = takeOffState, 2 = hoverState, 3 = turnState,
// 4 = forwardState, 5 = verticalUpState, 6 = verticalDownState
int droneState = 0;

// drone control variables
int rangeStop = 15;
int turnCounter = 0;
int forwardSpeed = -0.3;
int turnSpeed = -1;
int downSpeed = -.5;
int upSpeed = 1;
int verticalUpTime = 2;
int verticalDownTime = 1;

// Declaration of RangeFinder Class
MultiAnalogRange rangeClass;

// Variables for range values
int rangeTimer = 0;
int rangeCounter = 0;
int leftRange = 0;
int rightRange = 0;
int verticalRange = 0;
int leftSensor[3];
int rightSensor[3];
int verticalSensor[3];

// State Functions
//-------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------
void verticalDownState()
{
	//Serial.println("verticalDownState, decreasing height");
	droneState = 6;
	sprintf(data,"AT*PCMD=%d,0,0,0,downSpeed,0\r",seq++);
}

void verticalUpState()
{
	//Serial.println("verticalState, increasing height");
	droneState = 5;
        sprintf(data,"AT*PCMD=%d,0,0,0,upSpeed,0\r",seq++);
}

void forwardState()
{
	//Serial.println("forwardState, moving forward");
	droneState = 4;
        sprintf(data,"AT*PCMD=%d,0,0,forwardSpeed,0,0\r",seq++); 
}

void turnState()
{
	//Serial.println("turnState, turning and incrementing turn counter");
	droneState = 3;

	if (turnCounter < 5)
	{
		turnCounter++;
	        sprintf(data,"AT*PCMD=%d,0,0,0,0,turnSpeed\r",seq++);
	}
	else
	{
		turnCounter = 0;

		//if (rangeClass.sensors[2] > 50)
		if (verticalRange > 50)
		{
			time = millis();
			verticalUpState();

			while (millis() - time < verticalUpTime)
			{
				keepConnection();
			}
		}
		else
		{
			time = millis();
			verticalDownState();

			while (millis() - time < verticalDownTime)
			{
				keepConnection();
			}
		}
	}
}

void hoverState()
{
        //Serial.println("hoverState, hovring with no directions");
        droneState = 2;
        sprintf(data,"AT*PCMD=%d,0,0,0,0,0\r",seq++); 
}

void takeOffState()
{
        //Serial.println("takeOffState, tell drone to take off");
        droneState = 1;
        sprintf(data,"AT*PCMD=%d,0,0,0,0,0\rAT*REF=%d,290718208\r",seq++,seq++);
}

void landingState()
{
        //Serial.println("landingState send land command");
        droneState = 0;
        sprintf(data,"AT*PCMD=%d,0,0,0,0,0\rAT*REF=%d,290717696\r",seq++,seq++);
}

void initialState()
{
         //Serial.println("initialState keep on ground until given command to fly");
         //time = millis();
	 //rangeTimer = time;
         sprintf(data,"AT*PCMD=%d,0,0,0,0,0\rAT*REF=%d,290717696\r",1,1);
}
//-------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------

// State transition functions
//-------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------
void keepConnection()
{
	// 0 = landingState, 1 = takeOffState, 2 = hoverState, 3 = turnState,
	// 4 = forwardState, 5 = verticalUpState, 6 = verticalDownState

	Serial.println("Keeping drone connection alive");
	switch(droneState)
	{
		case 0:
			landingState();
			break;
		case 1:
			takeOffState();
			break;
		case 2:
			hoverState();
			break;
		case 3:
			turnState();
			break;
		case 4:
			forwardState();
			break;
		case 5:
			verticalUpState();
			break;
		case 6:
			verticalDownState();
			break;	
	}
}

void vertTurnCheck()
{
	//if (rangeClass.sensors[2] < rangeStop)
	if (verticalRange < rangeStop)
	{
		droneState = 6;

		//while (rangeClass.sensors[2] < rangeStop)
		while (verticalRange < rangeStop)
		{
			keepConnection();
		}
	}
	//else if (rangeClass.sensors[1] < rangeStop || rangeClass.sensors[0] < rangeStop)
	else if (leftRange < rangeStop || rightRange < rangeStop)
	{
		droneState = 3;

		//while (rangeClass.sensors[1] < rangeStop || rangeClass.sensors[0] < rangeStop)
		while (leftRange < rangeStop || rightRange < rangeStop)		
		{
			keepConnection();
		}

		turnCounter = 0;
	}
	else
	{
		droneState = 4;
	}
}

void stateChooser()
{
	
	// If verticalTrigger or forwardTrigger is on then change
	// drone state to hover and transition to turnState or
	// verticalUpState/verticalDownState and continue to
	// forwardState when possible
	//if ((rangeClass.sensors[0] > rangeStop) && (rangeClass.sensors[1] > rangeStop) && (rangeClass.sensors[2] > rangeStop))
	if (leftRange > rangeStop && rightRange > rangeStop && verticalRange > rangeStop)
	{
		switch(droneState)
		{
			case 0:
				landingState();
				droneState = 1;
				delay(4000);
				break;
			case 1:
				takeOffState();
				droneState = 2;
				delay(4000);
				break;
			case 2:
				hoverState();
				droneState = 4;
				delay(4000);
				break;
			case 3:
				droneState = 4;
				break;
			case 4:
				forwardState();
				droneState = 4;
				break;
			case 5:
				droneState = 4;
				break;
			case 6:
				droneState = 4;
				break;
			default:
				landingState();
				break;
		}
	}
	else
	{
		vertTurnCheck();
	}
}
//-------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------

// Get Range Values functions
//-------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------
void setSensors()
{
	int i;
	int left = 0;
	int right = 0;
	int vertical = 0;

	for (i = 0; i < 3; i++)
	{
		if (left < leftSensor[i])
		{
			left = leftSensor[i];
		}
		if (right < rightSensor[i])
		{
			right = rightSensor[i];
		}
		if (vertical < verticalSensor[i])
		{
			vertical = verticalSensor[i];
		}
	}

	leftRange = left;
	rightRange = right;
	verticalRange = vertical;
}

void rangeCompare()
{
	if (rangeTimer < 3)
	{
		leftSensor[rangeTimer] = rangeClass.sensors[0];
		rightSensor[rangeTimer] = rangeClass.sensors[1];
		verticalSensor[rangeTimer] = rangeClass.sensors[2];
		rangeTimer++;
	}

	if (rangeTimer == 3)
	{
		setSensors();
	}
}
//-------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------

// Flight control logic
//-------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------
void flightSequence()
{
	if (time == 0)
	{
		initialState();
	}

	rangeClass.GetRanges();
	rangeCompare();
	//rangeTimer = millis();

	// Print debug values
	printTestValues();

	if (rangeTimer == 3)
	{
		stateChooser();
		rangeTimer = 0;
	}
}
//-------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------

// Print statements for testing
//-------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------
void printTestValues()
{
/*
	Serial.print("DroneState = ");
	Serial.print(droneState);
	Serial.print(", Left Range = ");
	Serial.print(rangeClass.sensors[0]);
	Serial.print(", Right Range = ");
	Serial.print(rangeClass.sensors[1]);
	Serial.print(", Vertical Range = ");
	Serial.print(rangeClass.sensors[2]);
	Serial.println(",");
*/
	Serial.print("DroneState = ");
	Serial.print(droneState);
	Serial.print(", Left Range = ");
	Serial.print(leftRange);
	Serial.print(", Right Range = ");
	Serial.print(rightRange);
	Serial.print(", Vertical Range = ");
	Serial.print(verticalRange);
	Serial.println(",");
}
//-------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------

// Arduino required functions
//-------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------
void setup()
{
        Serial.begin(9600);
        Serial.println("");
        Serial.println("");
        Serial.println("Initialize Connection");
        
	WiFi.init();
        Serial.println("Initialized");
        
        unsigned char *my_mac = zg_get_mac();
        sprintf(yj_mac,"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X",my_mac[0],my_mac[1],my_mac[2],my_mac[3],my_mac[4],my_mac[5]);
        
        Serial.print("MAC Address: ");
        Serial.println(yj_mac);
}

void loop()
{
	WiFi.run();
	
	// Function to run flight test using vertical range
	// finder to stop sequence
	flightSequence();
}
